#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pygame
from gui_base import 界面基类

class 设置界面(界面基类):
    """游戏设置界面"""
    
    def __init__(self, gui):
        super().__init__(gui)
        self.设置项 = {
            "音乐音量": 70,
            "音效音量": 80,
            "全屏显示": False,
            "粒子效果": True,
            "字体大小": "中"
        }
    
    def 初始化(self):
        """初始化设置界面"""
        屏幕宽度 = self.gui.屏幕.get_width()
        屏幕高度 = self.gui.屏幕.get_height()
        
        # 创建返回按钮
        返回按钮 = self.gui.创建按钮(20, 20, 100, 40, "返回", self.返回主菜单)
        self.添加组件(返回按钮)
        
        # 创建保存按钮
        保存按钮 = self.gui.创建按钮(屏幕宽度 - 120, 20, 100, 40, "保存", self.保存设置)
        self.添加组件(保存按钮)
        
        # 从游戏引擎获取设置数据
        self.加载设置()
        
        # 创建设置选项
        y位置 = 100
        y间隔 = 80
        
        # 音乐音量滑块
        音乐音量标签 = self.gui.创建标签(100, y位置, "音乐音量:")
        音乐音量滑块 = self.gui.创建滑块(300, y位置, 300, 30, self.设置项["音乐音量"], 0, 100, 
                              lambda 值: self.更新设置("音乐音量", 值))
        self.添加组件(音乐音量标签)
        self.添加组件(音乐音量滑块)
        
        # 音效音量滑块
        y位置 += y间隔
        音效音量标签 = self.gui.创建标签(100, y位置, "音效音量:")
        音效音量滑块 = self.gui.创建滑块(300, y位置, 300, 30, self.设置项["音效音量"], 0, 100,
                              lambda 值: self.更新设置("音效音量", 值))
        self.添加组件(音效音量标签)
        self.添加组件(音效音量滑块)
        
        # 全屏显示复选框
        y位置 += y间隔
        全屏显示复选框 = self.gui.创建复选框(100, y位置, "全屏显示", self.设置项["全屏显示"],
                                lambda 值: self.更新设置("全屏显示", 值))
        self.添加组件(全屏显示复选框)
        
        # 粒子效果复选框
        y位置 += y间隔
        粒子效果复选框 = self.gui.创建复选框(100, y位置, "粒子效果", self.设置项["粒子效果"],
                                lambda 值: self.更新设置("粒子效果", 值))
        self.添加组件(粒子效果复选框)
        
        # 字体大小单选按钮
        y位置 += y间隔
        字体标签 = self.gui.创建标签(100, y位置, "字体大小:")
        self.添加组件(字体标签)
        
        字体选项 = ["小", "中", "大"]
        for i, 选项 in enumerate(字体选项):
            选中 = (选项 == self.设置项["字体大小"])
            单选按钮 = self.gui.创建单选按钮(300 + i * 100, y位置, 选项, "字体大小", 选中,
                                lambda 值, o=选项: self.更新设置("字体大小", o))
            self.添加组件(单选按钮)
    
    def 加载设置(self):
        """从游戏引擎加载设置"""
        if self.gui.游戏引擎:
            引擎设置 = self.gui.游戏引擎.获取设置()
            if 引擎设置:
                self.设置项.update(引擎设置)
    
    def 更新设置(self, 名称, 值):
        """更新设置项
        
        参数:
            名称: 设置项名称
            值: 设置项的值
        """
        self.设置项[名称] = 值
        
        # 实时应用某些设置
        if 名称 == "音乐音量" and self.gui.游戏引擎:
            self.gui.游戏引擎.设置音乐音量(值)
        elif 名称 == "音效音量" and self.gui.游戏引擎:
            self.gui.游戏引擎.设置音效音量(值)
    
    def 保存设置(self):
        """保存设置到游戏引擎"""
        if self.gui.游戏引擎:
            self.gui.游戏引擎.保存设置(self.设置项)
            
            # 如果有需要立即应用的设置
            if self.设置项["全屏显示"]:
                self.gui.进入全屏()
            else:
                self.gui.退出全屏()
        
        # 显示保存成功信息
        self.gui.显示消息("设置已保存")
    
    def 返回主菜单(self):
        """返回主菜单"""
        self.gui.切换界面("主菜单")
    
    def 绘制(self, 屏幕):
        """绘制设置界面
        
        参数:
            屏幕: Pygame屏幕对象
        """
        if not self.活跃:
            return
        
        屏幕宽度 = 屏幕.get_width()
        
        # 绘制标题
        标题字体 = pygame.font.Font(None, 48)
        标题文本 = 标题字体.render("游戏设置", True, (255, 255, 255))
        标题位置 = ((屏幕宽度 - 标题文本.get_width()) // 2, 20)
        屏幕.blit(标题文本, 标题位置)
        
        # 绘制所有组件
        super().绘制(屏幕) 