#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pygame
from gui_base import 界面基类

class 角色属性界面(界面基类):
    """游戏角色属性界面"""
    
    def __init__(self, gui):
        super().__init__(gui)
        self.属性数据 = None
        self.属性颜色 = {
            "知识": (65, 105, 225),  # 蓝色
            "体力": (50, 205, 50),   # 绿色
            "社交": (255, 165, 0),   # 橙色
            "爱国心": (220, 20, 60),  # 红色
            "家庭关系": (138, 43, 226), # 紫色
            "心情": (255, 215, 0)     # 金色
        }
    
    def 初始化(self):
        """初始化角色属性界面"""
        屏幕宽度 = self.gui.屏幕.get_width()
        
        # 创建返回按钮
        返回按钮 = self.gui.创建按钮(20, 20, 100, 40, "返回", self.返回主菜单)
        self.添加组件(返回按钮)
        
        # 获取角色属性数据
        self.更新属性数据()
    
    def 更新属性数据(self):
        """从游戏引擎获取角色属性数据"""
        if self.gui.游戏引擎:
            self.属性数据 = self.gui.游戏引擎.获取角色属性()
        else:
            # 测试数据
            self.属性数据 = {
                "基本信息": {
                    "姓名": "小明",
                    "年龄": 8,
                    "年级": "小学二年级",
                    "零花钱": 5.5
                },
                "属性": {
                    "知识": 60,
                    "体力": 75,
                    "社交": 50,
                    "爱国心": 65,
                    "家庭关系": 80,
                    "心情": 90
                }
            }
    
    def 返回主菜单(self):
        """返回主菜单"""
        self.gui.切换界面("主菜单")
    
    def 绘制属性条(self, 屏幕, 名称, 值, x, y, 宽度=300, 高度=25):
        """绘制属性条
        
        参数:
            屏幕: Pygame屏幕对象
            名称: 属性名称
            值: 属性值 (0-100)
            x, y: 绘制位置
            宽度: 属性条宽度
            高度: 属性条高度
        """
        字体 = pygame.font.Font(None, 28)
        名称文本 = 字体.render(f"{名称}: {值}", True, (255, 255, 255))
        屏幕.blit(名称文本, (x, y))
        
        # 绘制属性条背景
        pygame.draw.rect(屏幕, (50, 50, 50), (x, y + 30, 宽度, 高度), 0, 5)
        
        # 绘制属性条
        颜色 = self.属性颜色.get(名称, (200, 200, 200))
        填充宽度 = int(宽度 * 值 / 100)
        pygame.draw.rect(屏幕, 颜色, (x, y + 30, 填充宽度, 高度), 0, 5)
    
    def 绘制(self, 屏幕):
        """绘制角色属性界面
        
        参数:
            屏幕: Pygame屏幕对象
        """
        if not self.活跃:
            return
        
        屏幕宽度 = 屏幕.get_width()
        屏幕高度 = 屏幕.get_height()
        
        # 绘制标题
        标题字体 = pygame.font.Font(None, 48)
        标题文本 = 标题字体.render("角色属性", True, (255, 255, 255))
        标题位置 = ((屏幕宽度 - 标题文本.get_width()) // 2, 20)
        屏幕.blit(标题文本, 标题位置)
        
        if not self.属性数据:
            # 如果没有数据，显示提示
            提示字体 = pygame.font.Font(None, 36)
            提示文本 = 提示字体.render("无法获取角色属性数据", True, (200, 200, 200))
            提示位置 = ((屏幕宽度 - 提示文本.get_width()) // 2, 屏幕高度 // 2)
            屏幕.blit(提示文本, 提示位置)
            return
        
        # 绘制基本信息
        基本信息 = self.属性数据.get("基本信息", {})
        信息字体 = pygame.font.Font(None, 32)
        y位置 = 80
        
        # 创建信息卡片背景
        pygame.draw.rect(屏幕, (40, 40, 60), (50, y位置, 屏幕宽度 - 100, 120), 0, 10)
        
        姓名 = 基本信息.get("姓名", "未知")
        年龄 = 基本信息.get("年龄", 0)
        年级 = 基本信息.get("年级", "未知")
        零花钱 = 基本信息.get("零花钱", 0)
        
        姓名文本 = 信息字体.render(f"姓名: {姓名}", True, (255, 255, 255))
        屏幕.blit(姓名文本, (100, y位置 + 20))
        
        年龄文本 = 信息字体.render(f"年龄: {年龄}岁", True, (255, 255, 255))
        屏幕.blit(年龄文本, (100, y位置 + 60))
        
        年级文本 = 信息字体.render(f"年级: {年级}", True, (255, 255, 255))
        屏幕.blit(年级文本, (屏幕宽度 // 2, y位置 + 20))
        
        零花钱文本 = 信息字体.render(f"零花钱: {零花钱}元", True, (255, 255, 255))
        屏幕.blit(零花钱文本, (屏幕宽度 // 2, y位置 + 60))
        
        # 绘制属性条
        属性数据 = self.属性数据.get("属性", {})
        属性y位置 = y位置 + 150
        属性列表 = list(属性数据.items())
        
        # 左侧属性
        左侧x = 100
        for i in range(0, len(属性列表), 2):
            if i < len(属性列表):
                名称, 值 = 属性列表[i]
                self.绘制属性条(屏幕, 名称, 值, 左侧x, 属性y位置 + (i // 2) * 80)
        
        # 右侧属性
        右侧x = 屏幕宽度 // 2 + 50
        for i in range(1, len(属性列表), 2):
            if i < len(属性列表):
                名称, 值 = 属性列表[i]
                self.绘制属性条(屏幕, 名称, 值, 右侧x, 属性y位置 + (i // 2) * 80)
        
        # 绘制所有组件
        super().绘制(屏幕) 