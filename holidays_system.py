#!/usr/bin/env python
# -*- coding: utf-8 -*-

import datetime
import random
import json
import os

try:
    from chinese_calendar import is_holiday, get_holiday_detail
    CHINESE_CALENDAR_AVAILABLE = True
except ImportError:
    CHINESE_CALENDAR_AVAILABLE = False
    print("警告：未找到chinese_calendar库，节日功能将使用模拟数据")
    print("尝试：pip install chinese-calendar")

# 农历春节日期映射表（公历日期，1996-2010）
春节日期表 = {
    1996: (2, 19),  # 1996年2月19日
    1997: (2, 7),
    1998: (1, 28),
    1999: (2, 16),
    2000: (2, 5),
    2001: (1, 24),
    2002: (2, 12),
    2003: (2, 1),
    2004: (1, 22),
    2005: (2, 9),
    2006: (1, 29),
    2007: (2, 18),
    2008: (2, 7),
    2009: (1, 26),
    2010: (2, 14)
}

# 其他主要节日（月, 日）
节日表 = {
    "元旦": (1, 1),
    "清明节": (4, 5),  # 实际上是农历，这里简化
    "劳动节": (5, 1),
    "儿童节": (6, 1),
    "国庆节": (10, 1),
    "中秋节": {  # 农历，用公历近似表示
        1996: (9, 27),
        1997: (9, 16),
        1998: (10, 5),
        1999: (9, 24),
        2000: (9, 12),
        2001: (10, 1),
        2002: (9, 21),
        2003: (9, 11),
        2004: (9, 28),
        2005: (9, 18),
        2006: (10, 6),
        2007: (9, 25),
        2008: (9, 14),
        2009: (10, 3),
        2010: (9, 22)
    },
    "端午节": {  # 农历，用公历近似表示
        1996: (6, 11),
        1997: (6, 9),
        1998: (6, 30),
        1999: (6, 18),
        2000: (6, 6),
        2001: (6, 25),
        2002: (6, 15),
        2003: (6, 4),
        2004: (6, 22),
        2005: (6, 11),
        2006: (5, 31),
        2007: (6, 19),
        2008: (6, 8),
        2009: (5, 28),
        2010: (6, 16)
    }
}

# 春节压岁钱系数（按年代）
压岁钱系数 = {
    1996: 0.5,  # 基础系数
    1997: 0.6,
    1998: 0.7,
    1999: 0.8,
    2000: 1.0,  # 千禧年特别加成
    2001: 1.1,
    2002: 1.2,
    2003: 1.0,  # 非典影响
    2004: 1.3,
    2005: 1.4,
    2006: 1.5,
    2007: 1.6,
    2008: 1.8,  # 奥运年加成
    2009: 1.7,  # 经济危机影响
    2010: 2.0   # 基础系数翻倍
}

# 春节特殊事件
春节特殊事件 = {
    1996: "春节联欢晚会成为全家必看节目",
    1997: "香港回归前的最后一个春节",
    1998: "亚洲金融危机下的节俭春节",
    1999: "千年虫担忧下的世纪之交准备",
    2000: "新世纪第一个春节，红包特别多",
    2001: "短信拜年开始流行",
    2002: "第一次有了互联网拜年",
    2003: "非典影响下的特殊春节",
    2004: "互联网春节贺卡大量出现",
    2005: "春运压力开始显现",
    2006: "QQ拜年开始流行",
    2007: "网络视频拜年初现",
    2008: "汶川地震后的第一个春节",
    2009: "经济危机下依然红火的春节",
    2010: "网购年货开始普及"
}

# 南北差异春节习俗
春节习俗 = {
    "北方": ["饺子", "贴春联", "放鞭炮", "看春晚", "串门拜年"],
    "南方": ["汤圆", "糯米糕", "放爆竹", "舞龙舞狮", "集体拜年"]
}

# 春晚经典节目
春晚经典节目 = {
    1996: ["《想跳就跳》", "《笑星撞地球》", "小品《如此包装》"],
    1997: ["《回家》", "小品《超生游击队》", "小品《发明家》"],
    1998: ["《常回家看看》", "小品《宇宙体操》", "小品《卖拐》"],
    1999: ["小品《昨天今天明天》", "小品《猜谜语》", "歌曲《责任》"],
    2000: ["小品《办晚会》", "《千年之约》", "小品《老伴》"],
    2001: ["歌曲《难忘今宵》", "小品《卖车》", "小品《吃饺子》"],
    2002: ["小品《脱口秀》", "歌曲《故乡》", "小品《说事儿》"],
    2003: ["小品《男子汉大丈夫》", "歌曲《读中国》", "小品《心病》"],
    2004: ["歌曲《回家过年》", "小品《策划》", "小品《演员的烦恼》"],
    2005: ["小品《新年祝福》", "小品《编辑部的故事》", "歌曲《青藏高原》"],
    2006: ["小品《功夫》", "歌曲《常回家看看》", "小品《狭路相逢》"],
    2007: ["小品《放心吧》", "歌曲《难忘今宵》", "小品《卖车》"],
    2008: ["小品《火炬手》", "歌曲《北京欢迎你》", "小品《同喜同乐》"],
    2009: ["小品《不差钱》", "歌曲《爱的奉献》", "小品《开心假期》"],
    2010: ["小品《直通春晚》", "歌曲《最炫民族风》", "小品《物业费》"],
    2011: ["小品《荒唐一课》", "歌曲《欢乐中国年》", "小品《同桌的你》"],
    2012: ["小品《今天的幸福》", "歌曲《中国味道》", "小品《新对缝》"],
    2013: ["小品《大城小爱》", "歌曲《一路花香》", "小品《扶不扶》"],
    2014: ["小品《扰民了您》", "歌曲《吉祥幸福年》", "小品《扶老人》"],
    2015: ["小品《喜乐街》", "歌曲《时间都去哪了》", "小品《投其所好》"],
    2016: ["小品《漂亮的回答》", "歌曲《回家》", "小品《快乐老家》"],
    2017: ["小品《真情永驻》", "歌曲《美丽中国年》", "小品《老伴》"],
    2018: ["小品《手机充值》", "歌曲《青春畅想》", "小品《送礼》"],
    2019: ["小品《啼笑皆非》", "歌曲《我和我的祖国》", "小品《站台》"],
    2020: ["小品《走过场》", "歌曲《爱是桥梁》", "小品《父子情深》"]
}

class 节日系统:
    """节日系统类，处理各类节日事件和效果"""
    
    def __init__(self, 数据保存路径="data"):
        """初始化节日系统
        
        参数:
            数据保存路径(str): 节日数据保存路径
        """
        self.数据保存路径 = 数据保存路径
        self._确保目录存在()
        self.节日数据 = self._加载节日数据()
        self.当前区域 = "北方"  # 默认区域
        
    def _确保目录存在(self):
        """确保数据目录存在"""
        if not os.path.exists(self.数据保存路径):
            os.makedirs(self.数据保存路径)
    
    def _加载节日数据(self):
        """加载节日数据
        
        返回:
            dict: 节日数据字典
        """
        节日数据文件 = os.path.join(self.数据保存路径, "holiday_events.json")
        
        if os.path.exists(节日数据文件):
            try:
                with open(节日数据文件, "r", encoding="utf-8") as f:
                    return json.load(f)
            except (json.JSONDecodeError, UnicodeDecodeError):
                print("节日数据文件损坏，使用默认数据")
        
        # 默认节日数据
        return {
            "已触发节日": [],
            "收集的春联": [],
            "收到的压岁钱": {},
            "拜年记录": {},
            "节日特殊物品": []
        }
    
    def _保存节日数据(self):
        """保存节日数据"""
        节日数据文件 = os.path.join(self.数据保存路径, "holiday_events.json")
        
        with open(节日数据文件, "w", encoding="utf-8") as f:
            json.dump(self.节日数据, f, ensure_ascii=False, indent=4)
    
    def 设置区域(self, 区域):
        """设置玩家所在区域（影响节日习俗）
        
        参数:
            区域(str): "北方"或"南方"
        """
        if 区域 in ["北方", "南方"]:
            self.当前区域 = 区域
            return True
        return False
    
    def 获取区域习俗(self):
        """获取当前区域的春节习俗
        
        返回:
            list: 习俗列表
        """
        return 春节习俗.get(self.当前区域, [])
    
    def 是否春节(self, 年份, 月, 日):
        """判断指定日期是否是春节
        
        参数:
            年份(int): 年份
            月(int): 月份
            日(int): 日期
            
        返回:
            bool: 是否是春节
        """
        if 年份 in 春节日期表:
            春节月, 春节日 = 春节日期表[年份]
            return 月 == 春节月 and 日 == 春节日
        return False
    
    def 是否节日(self, 年份, 月, 日):
        """判断指定日期是否是节日
        
        参数:
            年份(int): 年份
            月(int): 月份
            日(int): 日期
            
        返回:
            tuple: (是否节日, 节日名称)
        """
        # 检查春节
        if self.是否春节(年份, 月, 日):
            return (True, "春节")
        
        # 检查其他节日
        for 节日名, 日期信息 in 节日表.items():
            if isinstance(日期信息, tuple):
                节日月, 节日日 = 日期信息
                if 月 == 节日月 and 日 == 节日日:
                    return (True, 节日名)
            elif isinstance(日期信息, dict) and 年份 in 日期信息:
                节日月, 节日日 = 日期信息[年份]
                if 月 == 节日月 and 日 == 节日日:
                    return (True, 节日名)
                    
        # 使用chinese_calendar库（如果可用）
        if CHINESE_CALENDAR_AVAILABLE:
            try:
                日期 = datetime.date(年份, 月, 日)
                if is_holiday(日期):
                    节日名 = get_holiday_detail(日期)[1]
                    return (True, 节日名)
            except:
                pass
                
        return (False, None)
    
    def 计算压岁钱(self, 年份, 亲戚数量=10):
        """计算指定年份的压岁钱总额
        
        参数:
            年份(int): 年份
            亲戚数量(int): 亲戚数量
            
        返回:
            int: 压岁钱总额
        """
        基础系数 = 压岁钱系数.get(年份, 1.0)
        随机因子 = random.uniform(0.8, 1.2)
        单个红包平均值 = int(20 * 基础系数 * 随机因子)
        总额 = 单个红包平均值 * 亲戚数量
        
        # 特殊年份加成
        if 年份 == 2000:  # 千禧年
            总额 *= 1.5
        elif 年份 == 2003:  # 非典年
            总额 *= 0.8
        elif 年份 == 2008:  # 奥运年
            总额 *= 1.3
            
        return int(总额)
    
    def 记录压岁钱(self, 年份, 金额):
        """记录指定年份收到的压岁钱
        
        参数:
            年份(int): 年份
            金额(int): 压岁钱金额
        """
        self.节日数据["收到的压岁钱"][str(年份)] = 金额
        self._保存节日数据()
    
    def 获取压岁钱记录(self):
        """获取历年压岁钱记录
        
        返回:
            dict: 年份和压岁钱金额的字典
        """
        return self.节日数据["收到的压岁钱"]
    
    def 获取春节事件(self, 年份):
        """获取指定年份的春节特殊事件
        
        参数:
            年份(int): 年份
            
        返回:
            str: 事件描述
        """
        return 春节特殊事件.get(年份, "普通的春节")
    
    def 获取春晚节目(self, 年份):
        """获取指定年份的春晚经典节目
        
        参数:
            年份(int): 年份
            
        返回:
            list: 节目列表
        """
        return 春晚经典节目.get(年份, ["难忘今宵", "小品", "歌舞表演"])
    
    def 添加春联(self, 春联文本):
        """添加收集到的春联
        
        参数:
            春联文本(str): 春联内容
        """
        if 春联文本 not in self.节日数据["收集的春联"]:
            self.节日数据["收集的春联"].append(春联文本)
            self._保存节日数据()
            return True
        return False
    
    def 获取收集的春联(self):
        """获取已收集的春联列表
        
        返回:
            list: 春联列表
        """
        return self.节日数据["收集的春联"]
    
    def 记录拜年(self, 年份, 对象):
        """记录拜年活动
        
        参数:
            年份(int): 年份
            对象(str): 拜年对象
        """
        if str(年份) not in self.节日数据["拜年记录"]:
            self.节日数据["拜年记录"][str(年份)] = []
            
        if 对象 not in self.节日数据["拜年记录"][str(年份)]:
            self.节日数据["拜年记录"][str(年份)].append(对象)
            self._保存节日数据()
    
    def 获取拜年记录(self, 年份=None):
        """获取拜年记录
        
        参数:
            年份(int, optional): 指定年份，若为None则返回所有记录
            
        返回:
            dict/list: 拜年记录
        """
        if 年份:
            return self.节日数据["拜年记录"].get(str(年份), [])
        return self.节日数据["拜年记录"]
    
    def 添加节日物品(self, 物品名):
        """添加节日特殊物品
        
        参数:
            物品名(str): 物品名称
        """
        if 物品名 not in self.节日数据["节日特殊物品"]:
            self.节日数据["节日特殊物品"].append(物品名)
            self._保存节日数据()
            return True
        return False
    
    def 获取节日物品(self):
        """获取收集的节日特殊物品
        
        返回:
            list: 物品列表
        """
        return self.节日数据["节日特殊物品"]
    
    def 标记节日已触发(self, 年份, 节日名):
        """标记节日事件已触发
        
        参数:
            年份(int): 年份
            节日名(str): 节日名称
        """
        触发标记 = f"{年份}-{节日名}"
        if 触发标记 not in self.节日数据["已触发节日"]:
            self.节日数据["已触发节日"].append(触发标记)
            self._保存节日数据()
    
    def 是否已触发节日(self, 年份, 节日名):
        """检查节日事件是否已触发
        
        参数:
            年份(int): 年份
            节日名(str): 节日名称
            
        返回:
            bool: 是否已触发
        """
        触发标记 = f"{年份}-{节日名}"
        return 触发标记 in self.节日数据["已触发节日"]
    
    def 生成拜年话(self, 年代=None):
        """生成拜年祝福语
        
        参数:
            年代(int, optional): 年代特征，影响祝福语风格
            
        返回:
            str: 拜年祝福语
        """
        前缀 = ["恭祝", "祝您", "祝福", "愿您", "恭喜"]
        中间语 = ["新年", "春节", "新春", "佳节"]
        后缀 = [
            "快乐", "吉祥", "如意", "幸福", "安康",
            "财源滚滚", "万事如意", "心想事成", "阖家欢乐", "福寿安康"
        ]
        
        # 90年代风格
        if 年代 and 年代 < 2000:
            return f"{random.choice(前缀)}{random.choice(中间语)}{random.choice(后缀)}！"
        # 00年代短信风格
        elif 年代 and 年代 < 2005:
            return f"{random.choice(前缀)}{random.choice(中间语)}{random.choice(后缀)}!{random.choice(后缀)}!"
        # 后期网络风格
        else:
            表情 = ["^_^", "~O(∩_∩)O~", ":-)", "(づ￣3￣)づ", "(*^▽^*)"]
            return f"{random.choice(表情)} {random.choice(前缀)}{random.choice(中间语)}{random.choice(后缀)}！{random.choice(表情)}"
    
    def 生成春节游戏(self, 年份):
        """根据年份生成对应的春节小游戏
        
        参数:
            年份(int): 年份
            
        返回:
            dict: 游戏信息
        """
        游戏列表 = []
        
        # 1996-2000年的游戏
        if 1996 <= 年份 <= 2000:
            游戏列表 = [
                {
                    "名称": "手写春联比赛",
                    "描述": "用毛笔写出最漂亮的春联",
                    "难度": "中等"
                },
                {
                    "名称": "鞭炮连连看",
                    "描述": "按顺序点燃不同颜色的鞭炮",
                    "难度": "简单"
                },
                {
                    "名称": "年夜饭夹菜大赛",
                    "描述": "用筷子夹取各种年夜饭菜品",
                    "难度": "简单"
                }
            ]
        # 2001-2005年的游戏
        elif 2001 <= 年份 <= 2005:
            游戏列表 = [
                {
                    "名称": "短信拜年挑战",
                    "描述": "在70个字符内写出最有创意的拜年短信",
                    "难度": "中等"
                },
                {
                    "名称": "春运抢票大战",
                    "描述": "模拟春运抢票，考验手速与耐心",
                    "难度": "困难"
                },
                {
                    "名称": "贴福字游戏",
                    "描述": "将'福'字以不同方式贴在正确的位置",
                    "难度": "简单"
                }
            ]
        # 2006-2010年的游戏
        elif 2006 <= 年份 <= 2010:
            游戏列表 = [
                {
                    "名称": "QQ红包大战",
                    "描述": "抢QQ红包，考验手速与网速",
                    "难度": "中等"
                },
                {
                    "名称": "拜年短视频制作",
                    "描述": "制作创意拜年视频",
                    "难度": "困难"
                },
                {
                    "名称": "网购年货筛选",
                    "描述": "从众多商品中选择最优惠的年货",
                    "难度": "中等"
                }
            ]
        
        # 随机选择一个游戏
        if 游戏列表:
            return random.choice(游戏列表)
        else:
            return {
                "名称": "记忆春晚节目",
                "描述": "记忆并复述春晚节目顺序",
                "难度": "中等"
            } 